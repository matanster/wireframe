// Generated by CoffeeScript 1.6.3
var bars, globalDims, layout, panes, sceneObject, show, something, svgUtil, syncBar, textRectFactory, util;

util = require('./util');

svgUtil = require('./svgUtil');

globalDims = require('./globalDims');

sceneObject = globalDims.sceneObject;

layout = globalDims.layout;

bars = [];

syncBar = function(item, callback) {
  var key, val, _ref;
  _ref = item.geometry;
  for (key in _ref) {
    val = _ref[key];
    item.element.rectangle.attr(key, val);
  }
  item.element.text.attr('x', item.geometry.x + (item.geometry.width / 2));
  return item.element.text.attr('y', item.geometry.y + (item.geometry.height / 2));
};

textRectFactory = function(svgHookPoint, rectText) {
  var group, rectangle, text;
  group = svgHookPoint.append('g').style('-webkit-user-select', 'none').style('-webkit-touch-callout', 'none').style('user-select', 'none');
  rectangle = group.append('rect').style('stroke-width', '0px').style('fill-opacity', '1');
  if (rectText != null) {
    text = group.append('text').text(rectText).style("text-anchor", "middle").attr("dominant-baseline", "central").style("font-family", "verdana").style("font-weight", "bold").style('fill', '#EEEEEE');
  } else {
    text = null;
  }
  sceneObject = {
    group: group,
    rectangle: rectangle,
    text: text
  };
  return sceneObject;
};

exports.init = function(navBarsData, svgHookPoint) {
  var bar, barCreate, barData, colorScale, i, initialViewStatus, root, _i, _len;
  console.log('navBars init started');
  console.log('navBarsData object:');
  console.dir(navBarsData);
  colorScale = d3.scale.linear().domain([0, navBarsData.length]).range(['#87CEFA', '#00BFFF']);
  root = {
    'name': null,
    'element': textRectFactory(svgHookPoint),
    'color': '#999999',
    'parent': null,
    'nestLevel': -1,
    'viewStatus': 'visible'
  };
  initialViewStatus = function(bar) {
    if (bar.parentBar === null) {
      bar.viewStatus = 'visible';
    }
    if (bar.name === "Introduction") {
      return bar.viewStatus = 'selected';
    }
  };
  barCreate = function(svgHookPoint, barData, parentBar, color) {
    var bar, barDataSub, nestLevel, subBar, _i, _len, _ref;
    if (parentBar === null) {
      nestLevel = 0;
    } else {
      nestLevel = parentBar.nestLevel + 1;
    }
    bar = {
      'name': barData.name,
      'element': textRectFactory(svgHookPoint, barData.name),
      'color': colorScale(i),
      'parent': parentBar,
      'nestLevel': nestLevel,
      'viewStatus': 'hidden'
    };
    initialViewStatus(bar);
    if (barData.subs != null) {
      bar.children = [];
      _ref = barData.subs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        barDataSub = _ref[_i];
        subBar = barCreate(svgHookPoint, barDataSub, bar, color);
        bar.children.push(subBar);
      }
    }
    return bar;
  };
  for (i = _i = 0, _len = navBarsData.length; _i < _len; i = ++_i) {
    barData = navBarsData[i];
    bar = barCreate(svgHookPoint, barData, null, colorScale(i));
    bars.push(bar);
  }
  root.children = bars;
  return console.dir(root);
};

exports.redraw = function(geometry) {
  var bar, height, i, y, _i, _j, _len, _len1;
  console.log('navBars redraw started');
  console.dir(geometry);
  for (_i = 0, _len = bars.length; _i < _len; _i++) {
    bar = bars[_i];
    switch (bar.viewStatus) {
      case 'selected':
        bar.heightRatio = "2/3";
        break;
      default:
        bar.heightRatio = null;
    }
  }
  y = geometry.y;
  for (i = _j = 0, _len1 = bars.length; _j < _len1; i = ++_j) {
    bar = bars[i];
    if (bar.heightRatio != null) {
      height = Math.floor(geometry.height * (2 / 3));
    } else {
      height = Math.floor(geometry.height * (1 / 3) / (bars.length - 1));
    }
    bar.geometry = {
      x: geometry.x,
      width: geometry.width,
      y: y,
      height: height
    };
    syncBar(bar);
    y += height + 0.5;
    console.dir(bar);
  }
  return null;
};

something = function() {
  var colorScale, colorTransition, numberOfBoxes;
  numberOfBoxes = categories.length;
  colorScale = d3.scale.linear().domain([0, numberOfBoxes - 1]).range(['#87CEFA', '#00BFFF']);
  return colorTransition = function(i) {
    return function() {
      return d3.select(this).transition().duration(25).ease('circle').style('fill', colorScale(i));
    };
  };
};

panes = function(groupY, groupH, borderX, elements) {
  var boxH, height, i, width, _i, _ref, _results;
  boxH = groupH / elements.length;
  _results = [];
  for (i = _i = 0, _ref = elements.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    elements[i].x1 = 0;
    elements[i].x2 = borderX;
    /*
    if i is 0
      elements[i].y1 = layout.separator.top.y - 0.5
      elements[i].y2 = layout.separator.top.y + (groupH/2) + 0.5
    else
    */

    elements[i].y1 = groupY + Math.floor(boxH * i) - 0.5;
    elements[i].y2 = groupY + Math.floor(boxH * (i + 1)) + 0.5;
    width = util.calcLength(elements[i].x1, elements[i].x2);
    height = util.calcLength(elements[i].y1, elements[i].y2);
    elements[i].element.attr('x', elements[i].x1).attr('width', width).attr('y', elements[i].y1).attr('height', height);
    _results.push(elements[i].text.attr('x', elements[i].x1 + width / 2).attr('y', elements[i].y1 + height / 2));
  }
  return _results;
};

show = function() {
  var groupY;
  groupY = layout.separator.top.y - 0.5;
  panes(groupY, totalH, layout.separator.left.x.current, sceneObject.categories.level1);
  groupY = totalH / 2 + layout.separator.top.y - 0.5;
  return panes(groupY, totalH / 2, layout.separator.left.x.current, sceneObject.categories.level2);
};
