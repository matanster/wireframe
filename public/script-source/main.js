// Generated by CoffeeScript 1.6.3
var boxBlock, sceneDefine, svg, sync, syncContent, syncInit, util, viewport;

util = require('./util');

console.log('javascript main started');

svg = {};

viewport = null;

boxBlock = function(numberOfBoxes) {
  var box, _i, _ref, _results;
  svg.boxes = [];
  _results = [];
  for (box = _i = 0, _ref = numberOfBoxes - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; box = 0 <= _ref ? ++_i : --_i) {
    _results.push(svg.boxes[box] = svg.main.append("rect").style("fill", "#97c7e4").on("mouseover", function() {
      return d3.select(this).style("fill", "#a7d7f4");
    }).on("mouseout", function() {
      return d3.select(this).style("fill", "#97c7e4");
    }));
  }
  return _results;
};

syncContent = function(viewport) {
  var boxH, i, totalH, _i, _ref, _results;
  svg.main.attr("width", viewport.width).attr("height", viewport.height);
  totalH = viewport.height;
  boxH = totalH / svg.boxes.length;
  _results = [];
  for (i = _i = 0, _ref = svg.boxes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push(svg.boxes[i].attr("x", -20).attr("y", boxH * i).attr("width", 200).attr("height", boxH).attr("rx", 20).attr("ry", 10));
  }
  return _results;
};

sceneDefine = function() {
  svg.main = d3.select("body").append("svg");
  return boxBlock(6);
};

sync = function() {
  viewport = util.getViewport();
  console.dir(viewport);
  return syncContent(viewport);
};

syncInit = function() {
  sync();
  return window.onresize = function() {
    return sync();
  };
};

sceneDefine();

syncInit();

/*
svg.main.append("circle")
    .style("stroke", "gray")
    .style("fill", "white")
    .attr("r", 40)
    .attr("cx", 50)
    .attr("cy", 50)
    .on("mouseover", () -> d3.select(this).style("fill", "aliceblue"))
    .on("mouseout", () -> d3.select(this).style("fill", "white"));
*/

