// Generated by CoffeeScript 1.6.3
exports.textRectFactory = function(svgHookPoint, rectText, styles, visibility) {
  var group, rectangle, sceneObject, text, textDims;
  group = svgHookPoint.append('g').style('-webkit-user-select', 'none').style('-webkit-touch-callout', 'none').style('user-select', 'none').attr('id', rectText).attr('visibility', visibility);
  rectangle = group.append('rect').style(styles.rectangle);
  if (rectText != null) {
    text = group.append('text').text(rectText).attr("dominant-baseline", "central").style("text-anchor", "middle").style(styles.text);
    textDims = {
      width: text.node().getBBox().width,
      height: text.node().getBBox().height
    };
  } else {
    text = null;
  }
  sceneObject = {
    group: group,
    rectangle: rectangle,
    text: text,
    textDims: textDims
  };
  return sceneObject;
};

exports.sync = function(item, callback) {
  var attributesToTransition, key, stylesToTransition, val, _ref, _ref1, _ref2, _ref3, _results;
  if (item.mode) {
    console.log(item.mode);
  }
  if (item.mode === 'animate') {
    attributesToTransition = {};
    _ref = item.geometry;
    for (key in _ref) {
      val = _ref[key];
      if (key === 'x' || key === 'width' || key === 'y' || key === 'height' || key === 'rx' || key === 'ry') {
        if (parseFloat(item.element.attr(key)) !== val) {
          attributesToTransition[key] = val;
          console.dir('going to transition ' + key + ' from ' + item.element.attr(key) + ' to ' + val);
        }
      }
    }
    stylesToTransition = {};
    _ref1 = item.style;
    for (key in _ref1) {
      val = _ref1[key];
      if (item.element.style(key) !== val) {
        stylesToTransition[key] = val;
      }
    }
    if (callback != null) {
      return item.element.transition().duration(400).attr(attributesToTransition).style(stylesToTransition).each('end', callback);
    } else {
      return item.element.transition().duration(400).attr(attributesToTransition).style(stylesToTransition);
    }
  } else {
    _ref2 = item.geometry;
    for (key in _ref2) {
      val = _ref2[key];
      item.element.attr(key, val);
    }
    _ref3 = item.style;
    _results = [];
    for (key in _ref3) {
      val = _ref3[key];
      _results.push(item.element.style(key, val));
    }
    return _results;
  }
};
