// Generated by CoffeeScript 1.6.3
var anchorSVG, fontSize;

fontSize = '36px';

anchorSVG = void 0;

module.exports = function(tokens, mainSVG, textPortSVG, fontSizeChange) {
  var fontFamily, lHeight, paddingX, paddingY, spaceWidth, textPort, token, tokenToViewable, tokenViewable, viewPortFull, x, y, _i, _len, _results;
  console.log('textPorting started');
  if (fontSizeChange != null) {
    fontSize = parseFloat(fontSize) + fontSizeChange + 'px';
  }
  fontFamily = 'Helvetica';
  if (anchorSVG != null) {
    anchorSVG.remove();
  }
  anchorSVG = mainSVG.append('svg').style('text-anchor', 'start').style('fill', 'rgb(255,255,220)').style('font-family', fontFamily).style('font-size', fontSize);
  tokenToViewable = function(token) {
    var height, svg, visualToken, width;
    visualToken = {};
    svg = anchorSVG.append('text').attr('y', -100).attr('x', -100).style("dominant-baseline", "hanging");
    svg.text(token);
    width = svg.node().getBBox().width;
    height = svg.node().getBBox().height;
    visualToken.svg = svg;
    visualToken.height = height;
    visualToken.width = width;
    return visualToken;
  };
  spaceWidth = tokenToViewable('a a').width - tokenToViewable('aa').width;
  lHeight = tokenToViewable('l').height;
  paddingX = 10;
  paddingY = 10;
  textPort = {
    'x': parseFloat(textPortSVG.attr('x')) + paddingX,
    'width': parseFloat(textPortSVG.attr('width') - (paddingX * 2)),
    'y': parseFloat(textPortSVG.attr('y')) + paddingY,
    'height': parseFloat(textPortSVG.attr('height') - (paddingY * 2) - lHeight - 50)
  };
  viewPortFull = false;
  x = 0;
  y = 0;
  _results = [];
  for (_i = 0, _len = tokens.length; _i < _len; _i++) {
    token = tokens[_i];
    tokenViewable = tokenToViewable(token);
    if (token.mark = '1') {
      tokenViewable.svg.style('fill', 'rgb(255,255,220)');
    }
    if (x + tokenViewable.width < textPort.width) {
      tokenViewable.svg.attr('x', textPort.x + x);
      tokenViewable.svg.attr('y', textPort.y + y);
      x += tokenViewable.width;
    } else {
      if (y + tokenViewable.height < textPort.height) {
        x = 0;
        y += tokenViewable.height;
        tokenViewable.svg.attr('x', textPort.x + x);
        tokenViewable.svg.attr('y', textPort.y + y);
        x += tokenViewable.width;
      } else {
        console.log('text port full');
        viewPortFull = true;
        break;
      }
    }
    if (x + spaceWidth < textPort.width) {
      _results.push(x += spaceWidth);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};
