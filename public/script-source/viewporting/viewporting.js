// Generated by CoffeeScript 1.6.3
module.exports = function(tokens, mainSVG, textPortSVG) {
  var anchorSVG, dataToView, fontFamily, fontSize, full, spaceWidth, t, textPort, token, tokenToViewable, tokenViewable, x, y, _i, _len, _results;
  console.log('textPorting started');
  textPort = {
    'width': parseFloat(textPortSVG.attr('width')),
    'height': parseFloat(textPortSVG.attr('height')),
    'x': parseFloat(textPortSVG.attr('x')),
    'y': parseFloat(textPortSVG.attr('y'))
  };
  console.log(textPort);
  fontFamily = 'Helvetica';
  fontSize = '18px';
  dataToView = [];
  anchorSVG = mainSVG.append('svg').style('text-anchor', 'start').attr("dominant-baseline", "central").style('fill', '#EEEEEE').style('font-family', fontFamily).style('font-size', fontSize);
  tokenToViewable = function(token) {
    var height, svg, visualToken, width;
    visualToken = {};
    svg = anchorSVG.append('text').attr('y', -100).attr('x', -100);
    svg.text(token);
    width = svg.node().getBBox().width;
    height = svg.node().getBBox().height;
    visualToken.svg = svg;
    visualToken.height = height;
    visualToken.width = width;
    return visualToken;
  };
  spaceWidth = tokenToViewable('a a').width - tokenToViewable('aa').width;
  full = false;
  t = 0;
  x = 0;
  y = 0;
  _results = [];
  for (_i = 0, _len = tokens.length; _i < _len; _i++) {
    token = tokens[_i];
    tokenViewable = tokenToViewable(token);
    console.log("token width = " + tokenViewable.width);
    console.log("x = " + x);
    if (x + tokenViewable.width < textPort.width) {
      console.log('adding to line');
      tokenViewable.svg.attr('x', textPort.x + x);
      tokenViewable.svg.attr('y', textPort.y + y);
      x += tokenViewable.width;
    } else {
      if (y + tokenViewable.height < textPort.height) {
        console.log('adding to new line');
        x = 0;
        y += tokenViewable.height;
        tokenViewable.svg.attr('x', textPort.x + x);
        tokenViewable.svg.attr('y', textPort.y + y);
        x += tokenViewable.width;
      } else {
        full = true;
        break;
      }
    }
    if (x + spaceWidth < textPort.width) {
      x += spaceWidth;
      _results.push(console.log("x after space adding = " + x));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};
