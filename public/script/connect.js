(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ajax;

ajax = require('./myAjax');

exports.get = function(data, callback) {
  var ajaxRequest, ajaxTarget, ajaxVerb;
  ajaxTarget = location.protocol + '//' + location.hostname;
  ajaxVerb = 'getData';
  ajaxRequest = ajaxTarget + '/' + ajaxVerb + '?' + 'data=' + data;
  return ajax.go(ajaxRequest, null, function(response) {
    return callback(response);
  });
};

},{"./myAjax":3}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var calcEnd, calcStart, data, sceneDefine, sceneSync, svg, syncInit, util, viewport;

util = require('./util');

data = require('./data');

console.log('connect.js started');

svg = {};

viewport = null;

calcStart = function() {
  return 90;
};

calcEnd = function() {
  return 90;
};

sceneDefine = function(callback) {
  var images, main, text;
  main = function() {
    return svg.main = d3.select('body').append('svg').style('background-color', '#222288');
  };
  images = function() {
    var element, _i, _len, _ref;
    svg.upload = svg.main.append("svg:image").attr("xlink:href", "images/upload.svg");
    svg.link = svg.main.append("svg:image").attr("xlink:href", "images/link.svg");
    svg.dropbox = svg.main.append("svg:image").attr("xlink:href", "images/dropbox.svg");
    _ref = [svg.upload, svg.link, svg.dropbox];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      element.on('mouseover', function() {
        console.log('hover');
        return this.style.cursor = "pointer";
      }).on('mouseout', function() {
        console.log('end hover');
        return this.style.cursor = "default";
      }).on('mousedown', function() {
        console.log('click');
        this.style.cursor = "progress";
        return setTimeout((function() {
          return window.location.href = '/wait.html';
        }), 50);
      });
    }
    return svg.upload.on('dragover', function() {
      console.log('dragover');
      this.style.cursor = "progress";
      return setTimeout((function() {
        return window.location.href = '/wait.html';
      }), 1700);
    });
  };
  text = function() {
    svg.text = svg.main.append('text').text("let us know where's the article").style("text-anchor", "middle").attr("dominant-baseline", "central").style("font-family", "Helvetica").style("font-weight", "bold").attr("font-size", "25px");
    return svg.text1 = svg.main.append('text').text("Upload or Connect an Article").style("text-anchor", "middle").attr("dominant-baseline", "central").style("font-family", "Helvetica").style("font-weight", "bold").attr("font-size", "45px");
  };
  main();
  text();
  images();
  return callback();
};

sceneSync = function() {
  var diameter, end, heightQuantum, start, widthQuantum;
  viewport = util.getViewport();
  console.dir(viewport);
  console.log('starting scene sync');
  start = calcStart();
  end = 0;
  svg.main.attr('width', viewport.width).attr('height', viewport.height);
  widthQuantum = viewport.width / 10;
  diameter = widthQuantum * 2;
  heightQuantum = viewport.height / 6;
  svg.upload.attr('width', diameter).attr('height', diameter).attr('x', widthQuantum * 1).attr('y', heightQuantum * 2).style('opacity', 0.01);
  svg.link.attr('width', diameter).attr('height', diameter).attr('x', widthQuantum * 4).attr('y', heightQuantum * 3).style('opacity', 0.01);
  svg.dropbox.attr('width', diameter).attr('height', diameter).attr('x', widthQuantum * 7).attr('y', heightQuantum * 2).style('opacity', 0.01);
  svg.text.attr('x', viewport.width / 2).attr('y', heightQuantum * 1.3).style('fill', '#40bff1').style('opacity', 1);
  svg.text1.attr('x', viewport.width / 2).attr('y', heightQuantum * 0.9).style('fill', '#EEEEEE').style('opacity', 1).style('font-style', 'italic');
  svg.upload.transition().style('opacity', 1).duration(600).delay(500);
  svg.link.transition().style('opacity', 1).duration(600).delay(1000);
  svg.dropbox.transition().style('opacity', 1).duration(650).delay(1200);
};

syncInit = function() {
  sceneSync();
  return window.onresize = function() {
    return sceneSync();
  };
};

sceneDefine(syncInit);

},{"./data":1,"./util":4}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
exports.go = function(url, postData, callback) {
  var ajaxRequest;
  ajaxRequest = new XMLHttpRequest();
  console.log('Making ajax call to ' + url);
  ajaxRequest.onreadystatechange = function() {
    if (ajaxRequest.readyState === 4) {
      if (ajaxRequest.status === 200) {
        console.log('Ajax call to ' + url + ' succeeded.');
        return callback(ajaxRequest.responseText);
      } else {
        return console.error('Ajax call to ' + url + ' failed');
      }
    }
  };
  if (postData != null) {
    console.log('ajax request includes post data');
    ajaxRequest.open('POST', url, false);
    ajaxRequest.setRequestHeader("Content-type", "application/json");
    return ajaxRequest.send(postData);
  } else {
    ajaxRequest.open('GET', url, true);
    return ajaxRequest.send(null);
  }
};

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var getPaneID;

exports.getViewport = function() {
  return {
    width: window.innerWidth,
    height: window.innerHeight
  };
};

exports.calcLength = function(i1, i2) {
  return i2 - i1 + 1;
};

exports.makeSvgTopLayer = function(element) {
  return element.parentNode.appendChild(element);
};

getPaneID = function() {
  var paneCounter;
  if (typeof paneCounter !== "undefined" && paneCounter !== null) {
    paneCounter += 1;
  } else {
    paneCounter = 0;
  }
  console.log("paneCounter" + paneCounter);
  return paneCounter;
};

exports.titlePaneCreate = function(svgAnchor) {
  var paneId, paneObject;
  paneObject = Object;
  paneObject.element = svgAnchor.append('g');
  paneObject.pane = paneObject.element.append('rect').style('fill', '#60CAFB');
  paneId = "pane" + getPaneID();
  console.log("pangeId: " + paneId);
  paneObject.textwrapper = paneObject.element.append('foreignObject').append('xhtml:body').html("<svg id=" + paneId + " style='-webkit-transform: perspective(40px) rotateX(2deg)'></svg>");
  paneObject.textwrapper.style('pointer-events', 'none');
  paneObject.text = d3.select('#' + paneId).append('text').attr("dominant-baseline", "central").style("text-anchor", "middle").style('fill', "#EEEEEE");
  paneObject.paneId = paneId;
  return paneObject;
};

},{}]},{},[2])