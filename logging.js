// Generated by CoffeeScript 1.6.3
var log, testGraylog2, testLogio, testWinstonLogstash, tty, winston;

winston = require('winston');

log = function(level, msgOrObj) {
  return winston.log(level, msgOrObj);
};

exports.log = function(msgOrObj) {
  return log('info', msgOrObj);
};

exports.warn = function(msgOrObj) {
  return log('warn', msgOrObj);
};

exports.error = function(msgOrObj) {
  return log('error', msgOrObj);
};

exports.init = function() {};

tty = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[36m',
  magenta: '\x1b[35m',
  endColor: '\x1b[0m'
};

exports.logGreen = function(text) {
  return console.log(tty.green + text + tty.endColor);
};

exports.logYellow = function(text) {
  return console.log(tty.yellow + text + tty.endColor);
};

exports.logRed = function(text) {
  return console.log(tty.red + text + tty.endColor);
};

exports.logBlue = function(text) {
  return console.log(tty.blue + text + tty.endColor);
};

exports.logPerf = function(text) {
  return console.log(tty.magenta + text + tty.endColor);
};

testLogio = function() {
  require('winston-logio');
  winston.add(winston.transports.Logio, {
    port: 28777,
    node_name: 'nodejs',
    host: '127.0.0.1'
  });
  return winston.log('info', 'Hello to logio');
};

testGraylog2 = function() {
  winston.add(require('winston-graylog2').Graylog2, {});
  return winston.log('info', 'Hello to graylog2');
};

testWinstonLogstash = function() {
  log = function(level, msgOrObj) {
    if (typeof msgOrObj !== 'object') {
      return winston.log(level, msgOrObj);
    } else {
      return winston.log(level, msgOrObj);
    }
  };
  exports.log = function(msgOrObj) {
    return log('info', msgOrObj);
  };
  exports.warn = function(msgOrObj) {
    return log('warn', msgOrObj);
  };
  return exports.init = function() {
    require('winston-logstash');
    winston.remove(winston.transports.Console);
    return winston.add(winston.transports.Logstash, {
      port: 28777,
      node_name: 'nodejs',
      host: '127.0.0.1'
    });
  };
};
